{"version":3,"sources":["components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["conditions","props","console","log","responseObj","cod","city","name","list","map","index","className","date","dt","moment","utc","format","Math","round","temp","day","night","weather","description","src","icon","Forecast","useState","setResponseObj","setCity","unit","setUnit","uriEncodeCity","encodeURIComponent","onSubmit","event","preventDefault","fetch","then","response","json","catch","err","error","type","placeholder","maxLength","value","onChange","target","checked","Conditions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAgCeA,EA5BI,SAACC,GAMZ,OADJC,QAAQC,IAAI,aAAcF,GAElB,8BAC+B,QAA1BA,EAAMG,YAAYC,IACf,gCACI,6BAAKJ,EAAMG,YAAYE,KAAKC,OAC3BN,EAAMG,YAAYI,KAAKC,KAAI,SAAAC,GAC5B,OACI,sBAAKC,UAAU,UAAf,UACI,8BAbCC,EAa0B,IAAXF,EAAMG,GAZvCC,IAAOC,IAAIH,GAAMI,OAAO,WAaP,+BAAKC,KAAKC,MAAMR,EAAMS,KAAKC,KAA3B,QAAmCH,KAAKC,MAAMR,EAAMS,KAAKE,OAAzD,UACA,4BAAIX,EAAMY,QAAQ,GAAGC,cACrB,qBAAKC,IAAG,0CAAqCd,EAAMY,QAAQ,GAAGG,KAAtD,aAhBjB,IAAUb,QAqBd,QC8CJc,EArEE,WAAO,IAAD,EAGgBC,mBAAS,IAHzB,mBAGfvB,EAHe,KAGFwB,EAHE,OAIED,mBAAS,IAJX,mBAIfrB,EAJe,KAITuB,EAJS,OAKEF,mBAAS,YALX,mBAKfG,EALe,KAKTC,EALS,KAMdC,EAAgBC,mBAAmB3B,GAqBzC,OACC,gCACI,yDACI,uBAAM4B,SAtBf,SAAqBC,GACjBA,EAAMC,iBACTC,MAAM,0EAAD,OAA2EP,EAA3E,cAAqFE,EAArF,UAA4G,CAC7G,OAAU,MACV,QAAW,CACP,iBAAkB,qDAClB,kBAAmB,+CAG1BM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAC,GACCX,EAAeW,MAErBE,OAAM,SAAAC,GACHxC,QAAQyC,MAAMD,OAOV,UACI,uBACIE,KAAK,OACLC,YAAY,aACZC,UAAU,KACVC,MAAOzC,EACP0C,SAAU,SAACb,GAAD,OAAWN,EAAQM,EAAMc,OAAOF,UAE9C,kCACI,uBACIH,KAAK,QACLrC,KAAK,QACL2C,QAAkB,aAATpB,EACTiB,MAAM,WACNC,SAAU,SAACb,GAAD,OAAWJ,EAAQI,EAAMc,OAAOF,UANlD,gBAUA,kCACI,uBACIH,KAAK,QACLrC,KAAK,QACL2C,QAAkB,WAATpB,EACTiB,MAAM,SACNC,SAAU,SAACb,GAAD,OAAWJ,EAAQI,EAAMc,OAAOF,UANlD,aAWA,wBAAQH,KAAK,SAAb,6BAGR,cAACO,EAAD,CACI/C,YAAaA,QC/CVgD,MAhBf,WACE,OACE,sBAAKzC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,2CAEF,+BACE,cAAC,EAAD,MAEF,qECAS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de296a88.chunk.js","sourcesContent":["import React from 'react'\nimport moment from 'moment'\n\n\nconst conditions = (props) => {\n    const formatDate = function (date) {\n        return moment.utc(date).format('dddd')\n    }\n\n    console.log('props are ', props)\n        return (\n            <div>\n                {props.responseObj.cod === \"200\" ?\n                    <div>\n                        <h1>{props.responseObj.city.name}</h1>\n                        {props.responseObj.list.map(index => {\n                        return ( \n                            <div className=\"dayCard\">\n                                <h3>{formatDate(index.dt * 1000)}</h3>\n                                <h5>{Math.round(index.temp.day)}°/{Math.round(index.temp.night)}°</h5>\n                                <p>{index.weather[0].description}</p>\n                                <img src={`http://openweathermap.org/img/w/${index.weather[0].icon}.png`}/>\n                            </div>\n                        )})}\n                        \n                    </div>\n                 : null\n                }   \n            </div>\n        )\n    }\n\nexport default conditions","import React, { useState } from 'react'\nimport Conditions from '../Conditions/Conditions'\n\nconst Forecast = () => {\n\n    \n   let [responseObj, setResponseObj] = useState({})\n   let [city, setCity] = useState('')\n   let [unit, setUnit] = useState('imperial')\n   const uriEncodeCity = encodeURIComponent(city)\n\n   function getForecast(event) {\n       event.preventDefault()\n    fetch(`https://community-open-weather-map.p.rapidapi.com/forecast/daily?units=${unit}&q=${uriEncodeCity}&cnt=5`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-key\": \"3d1c8ca844mshaf005065fa525fcp1dc08djsnde222bc65b4d\",\n            \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n        }\n    })\n    .then(response => response.json())\n    \n    .then(response => {\n           setResponseObj(response)\n       })\n    .catch(err => {\n        console.error(err)\n    });\n   }\n\n   return (\n    <div>\n        <h2>Get your 5 day forecast</h2>\n            <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={city}\n                    onChange={(event) => setCity(event.target.value)}\n                    />\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(event) => setUnit(event.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(event) => setUnit(event.target.value)}\n                        />\n                    Celcius\n                </label>\n\n                <button type=\"submit\">Get Forecast</button>\n\n            </form>\n        <Conditions \n            responseObj={responseObj}\n            />\n    </div>\n    )\n}\n\nexport default Forecast;","import './App.css'\nimport Forecast from './components/Forecast/Forecast'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Weather</h1>\n      </header>\n      <main>\n        <Forecast/>\n      </main>\n      <footer>\n        Page created by Tslil Press\n      </footer>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}